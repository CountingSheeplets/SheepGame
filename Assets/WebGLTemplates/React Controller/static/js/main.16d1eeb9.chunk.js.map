{"version":3,"sources":["images/control-wheel.png","components/Healthbar.js","components/Typography.js","components/Bubble.js","components/BubbleGroup.js","components/ControlWheel.js","components/Recources.js","App.js","serviceWorker.js","index.js","images/healthbar.png"],"names":["module","exports","Healthbar","src","healthbar","alt","style","maxWidth","maxHeight","position","Wrapper","styled","div","Icon","span","Text","Typography","children","icon","sizes","BubbleSpan","props","small","top","Bubble","BubblesInLine","FloatingBubbles","BubbleGroup","ControlWheelBackground","WheelImage","img","wheelSize","ControlWheel","controlWheelImg","Container","Recources","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,2C,4JCa5BC,MAVf,WACE,OACE,yBACEC,IAAKC,IACLC,IAAI,YACJC,MAAO,CAAEC,SAAU,OAAQC,UAAW,QAASC,SAAU,e,0WCL/D,IAAMC,EAAUC,IAAOC,IAAV,KAMPC,EAAOF,IAAOG,KAAV,KAIJC,EAAOJ,IAAOG,KAAV,KAcKE,MATf,YAAyC,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAC9B,OACE,kBAACR,EAAD,KACE,kBAACG,EAAD,KAAOK,GACP,kBAACH,EAAD,KAAOE,K,+RClBb,IAAME,EACC,GADDA,EAEG,GAGHC,EAAaT,IAAOG,KAAV,KACJ,SAAAO,GAAK,OAAKA,EAAMC,MAAQH,EAAcA,KACvC,SAAAE,GAAK,OAAKA,EAAMC,MAAQH,EAAcA,KAQxC,SAAAE,GAAK,OAAIA,EAAME,OAWTC,MARf,SAAgBH,GACd,OACE,kBAACD,EAAeC,EACd,kBAAC,EAAD,a,yRCrBN,IAAMI,EAAgBd,IAAOC,IAAV,KAMbc,EAAkBf,IAAOC,IAAV,KAuBNe,MAhBf,WACE,OACE,6BACE,kBAACF,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,KACE,kBAAC,EAAD,CAAQJ,OAAK,EAACC,IAAK,KACnB,kBAAC,EAAD,CAAQD,OAAK,EAACC,IAAI,OAClB,kBAAC,EAAD,CAAQD,OAAK,EAACC,IAAI,W,wdCtB5B,IAEMb,EAAUC,IAAOC,IAAV,KAOPgB,EAAyBjB,IAAOC,IAAV,IATV,SAkBZiB,EAAalB,IAAOmB,IAAV,IACDC,KAcAC,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAACJ,EAAD,KACE,kBAACC,EAAD,CAAY1B,IAAK8B,IAAiB5B,IAAI,oB,gMC3B9C,IAAM6B,EAAYvB,IAAOC,IAAV,KAkBAuB,MAVf,WACE,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,CAAYhB,KAAK,gBAAjB,OACA,kBAAC,EAAD,CAAYA,KAAK,gBAAjB,OACA,kBAAC,EAAD,CAAYA,KAAK,gBAAjB,SCCSkB,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBnD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.16d1eeb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/control-wheel.e15b10eb.png\";","import React from 'react';\r\nimport healthbar from '../images/healthbar.png';\r\n\r\nfunction Healthbar() {\r\n  return (\r\n    <img\r\n      src={healthbar}\r\n      alt=\"healthbar\"\r\n      style={{ maxWidth: '100%', maxHeight: '100vh', position: 'absolute' }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Healthbar;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Icon = styled.span`\r\n  margin-bottom: -10px;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  font-size: 35px;\r\n  font-weight: 500;\r\n`;\r\n\r\nfunction Typography({ children, icon }) {\r\n  return (\r\n    <Wrapper>\r\n      <Icon>{icon}</Icon>\r\n      <Text>{children}</Text>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Typography;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Typography from './Typography';\r\n\r\nconst sizes = {\r\n  big: 75,\r\n  small: 55\r\n};\r\n\r\nconst BubbleSpan = styled.span`\r\n  height: ${props => (props.small ? sizes.small : sizes.big)}px;\r\n  width: ${props => (props.small ? sizes.small : sizes.big)}px;\r\n  background-color: #bbb;\r\n  border-radius: 50%;\r\n  display: inline-flex;\r\n  position: relative;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 5px;\r\n  top: ${props => props.top}px;\r\n`;\r\n\r\nfunction Bubble(props) {\r\n  return (\r\n    <BubbleSpan {...props}>\r\n      <Typography>10</Typography>\r\n    </BubbleSpan>\r\n  );\r\n}\r\n\r\nexport default Bubble;\r\n","import React from 'react';\r\nimport Bubble from './Bubble';\r\nimport styled from 'styled-components';\r\n\r\nconst BubblesInLine = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst FloatingBubbles = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: absolute;\r\n`;\r\n\r\nfunction BubbleGroup() {\r\n  return (\r\n    <div>\r\n      <BubblesInLine>\r\n        <Bubble></Bubble>\r\n        <Bubble></Bubble>\r\n        <FloatingBubbles>\r\n          <Bubble small top={85}></Bubble>\r\n          <Bubble small top=\"75\"></Bubble>\r\n          <Bubble small top=\"85\"></Bubble>\r\n        </FloatingBubbles>\r\n      </BubblesInLine>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BubbleGroup;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport controlWheelImg from '../images/control-wheel.png';\r\n\r\nconst wheelSize = 300;\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 100px;\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ControlWheelBackground = styled.div`\r\n  height: ${wheelSize}px;\r\n  width: ${wheelSize}px;\r\n  background-color: red;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  opacity: 50%;\r\n`;\r\n\r\nconst WheelImage = styled.img`\r\n  max-width: ${wheelSize - 40}px;\r\n  margin: 20px;\r\n`;\r\n\r\nfunction ControlWheel() {\r\n  return (\r\n    <Wrapper>\r\n      <ControlWheelBackground>\r\n        <WheelImage src={controlWheelImg} alt=\"controlWheel\" />\r\n      </ControlWheelBackground>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default ControlWheel;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Typography from './Typography';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n`;\r\n\r\nfunction Recources() {\r\n  return (\r\n    <Container>\r\n      <Typography icon=\"ðŸ”¥\">100</Typography>\r\n      <Typography icon=\"ðŸ”¥\">100</Typography>\r\n      <Typography icon=\"ðŸ”¥\">100</Typography>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Recources;\r\n","import React from 'react';\r\nimport Healthbar from './components/Healthbar';\r\nimport Bubble from './components/Bubble';\r\nimport BubbleGroup from './components/BubbleGroup';\r\nimport ControlWheel from './components/ControlWheel';\r\nimport Recources from './components/Recources';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Healthbar></Healthbar>\r\n      <Recources></Recources>\r\n      <BubbleGroup></BubbleGroup>\r\n      <ControlWheel></ControlWheel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/healthbar.27c5d136.png\";"],"sourceRoot":""}